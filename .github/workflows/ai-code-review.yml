name: Gemini Code Review

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize]

jobs:
  code-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node
        uses: actions/setup-node@v3

      - name: Install GoogleGenerativeAI
        run: |
          npm install @google/generative-ai

      # PR 이벤트에서의 변경사항 처리
      - name: Get git diff for PR
        run: |
          git fetch origin "${{ github.event.pull_request.base.ref }}"
          git fetch origin "${{ github.event.pull_request.head.ref }}"
          git diff --unified=0 "origin/${{ github.event.pull_request.base.ref }}" > "diff.txt"
          echo "EVENT_TYPE=pull_request" >> $GITHUB_ENV

      # Gemini를 사용한 코드 분석
      - name: Run Gemini-1.5-flash for code review
        id: gemini_review
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require("fs");
            const diff_output = fs.readFileSync("diff.txt", 'utf8');
            
            const { GoogleGenerativeAI } = require("@google/generative-ai");
            const genAI = new GoogleGenerativeAI("${{ secrets.GEMINI_API_KEY }}");
            const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash"});
            
            // 커밋 메시지를 참고하여 코드 리뷰할 수 있도록 프롬프트 수정
            const commitMessage = '${{ github.event.pull_request.title }}';
            let prompt = `Explain in korean. You are a senior software engineer and need to perform a code review based on the results of a given git diff. The commit message is: "${commitMessage}". Review the changed code from different perspectives such as readability, performance, security, and logic. If you see any issues with the code, include the exact line numbers as per the git diff format "@@ -0,0 +0,0 @@". The output format should be: [{"path":"{filepath}", "line":{line}, "text":"{review comment}", "side":"RIGHT"}]\n<git diff>${diff_output}</git diff>`;
            
            const result = await model.generateContent(prompt);
            const response = await result.response;
            const text = response.text();
            
            fs.writeFileSync('review_result.txt', text);
            console.log('Review results saved!');

      # 기존 리뷰 삭제 (봇이 쓴 리뷰만 삭제)
      - name: Delete existing PR review comments by the bot
        run: |
          # 기존 PR 리뷰 코멘트 삭제 (봇이 작성한 리뷰만 필터링하여 삭제)
          PR_COMMENTS=$(gh pr view ${{ github.event.pull_request.number }} --json comments -q ".comments[] | select(.user.login == \"github-actions[bot]\") | .id")
          for COMMENT_ID in $PR_COMMENTS; do
            gh pr comment ${{ github.event.pull_request.number }} --delete $COMMENT_ID
          done

      # 라인별 리뷰 코멘트 추가
      - name: Format and add PR review comments
        id: store
        run: |
          COMMENT=$(sed '/^```/d' review_result.txt | jq -c .)
          echo "comment=$COMMENT" >> $GITHUB_OUTPUT

      - name: Add Pull Request Review Comment
        uses: nbaztec/add-pr-review-comment@v1.0.7
        with:
          comments: ${{ steps.store.outputs.comment }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]'
          allow-repeats: false
