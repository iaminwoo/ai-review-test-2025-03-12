name: Gemini PR Summary and Explanation

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  pr-summary:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3

      - name: Install Dependencies
        run: npm install @google/generative-ai

      # PR 이벤트의 변경사항(diff) 추출
      - name: Get git diff for PR
        run: |
          git fetch origin "${{ github.event.pull_request.base.ref }}"
          git fetch origin "${{ github.event.pull_request.head.ref }}"
          git diff --unified=0 "origin/${{ github.event.pull_request.base.ref }}" > diff.txt

      # Gemini API를 호출하여 PR 제목, 설명, diff를 포함한 프롬프트로 요약 및 설명 생성
      - name: Run Gemini-1.5-flash
        id: gemini_review
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require("fs");
            const diff_output = fs.readFileSync("diff.txt",'utf8');
            
            const { GoogleGenerativeAI } = require("@google/generative-ai");
            const genAI = new GoogleGenerativeAI("${{ secrets.GEMINI_API_KEY }}");
            const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash"});
            
            let prompt = `
              Analyze the following git diff and provide feedback in JSON format.
              Explain the changes and improvements in Korean. but make it short.
              
              The response must be a valid JSON array. 
              Each feedback should follow this format:
              [
                {
                  "file": "파일 이름",
                  "comment": "코드 변경에 대한 피드백"
                }
              ]
              
              <git diff>
              ${diff_output}
              </git diff>
              
              Make sure the response is a valid JSON array with double quotes and proper formatting.
              `;

            try {
              const result = await model.generateContent(prompt);
              const response = await result.response;
              const text = response.text();

              if (!text || text.trim().length === 0) {
                console.log("❌ Gemini API 응답이 비어 있습니다.");
                process.exit(1);
              }

              fs.writeFileSync('review_result.txt', text);
              console.log("✅ Gemini API 응답을 review_result.txt 파일에 저장했습니다.");
            } catch (error) {
              console.error("❌ Gemini API 요청 중 오류 발생:", error);
              process.exit(1);
            }

      - name: Check if review_result.txt exists
        run: |
          if [ -f review_result.txt ]; then
            echo "review_result.txt 파일이 정상적으로 생성되었습니다."
            cat review_result.txt  # 파일 내용 출력
          else
            echo "❌ review_result.txt 파일이 존재하지 않습니다."
            exit 1  # 파일이 없으면 에러 발생
          fi

      - name: Debug review_result.txt
        run: |
          cat -A review_result.txt

      # 생성된 요약 내용을 PR 댓글로 추가하기 위해 JSON 문자열로 포맷팅
      - name: Format and add PR review comments
        id: store
        run: |
          COMMENT=$(jq -c 'if type == "array" then . else [.] end' < review_result.txt)
          echo "comment=$COMMENT" >> $GITHUB_OUTPUT

      - name: Add Pull Request Summary Comment
        if: github.event_name == 'pull_request'
        uses: nbaztec/add-pr-review-comment@v1.0.7
        with:
          comments: ${{ steps.store.outputs.comment }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]'
          allow-repeats: false
