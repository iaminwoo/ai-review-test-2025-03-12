name: Gemini PR Summary and Explanation

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  pr-summary:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3

      - name: Install Dependencies
        run: npm install @google/generative-ai

      # PR 이벤트의 변경사항(diff) 추출
      - name: Get git diff for PR
        run: |
          git fetch origin "${{ github.event.pull_request.base.ref }}"
          git fetch origin "${{ github.event.pull_request.head.ref }}"
          git diff --unified=0 "origin/${{ github.event.pull_request.base.ref }}" > diff.txt

      # Gemini API를 호출하여 PR 제목, 설명, diff를 포함한 프롬프트로 요약 및 설명 생성
      - name: Run Gemini-1.5-flash for PR Summary
        id: gemini_summary
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            // GitHub 이벤트에서 PR 제목과 설명을 가져옵니다.
            const prTitle = context.payload.pull_request.title;
            const prBody = context.payload.pull_request.body;
            // diff 파일 읽기
            const diffOutput = fs.readFileSync('diff.txt', 'utf8');
            // Gemini API 호출
            const { GoogleGenerativeAI } = require("@google/generative-ai");
            const genAI = new GoogleGenerativeAI("${{ secrets.GEMINI_API_KEY }}");
            const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash"});
            // 프롬프트 구성: PR 제목, 설명, 그리고 코드 변경사항 포함
            const prompt = `PR 제목: ${prTitle}\nPR 설명: ${prBody}\n\n다음 git diff를 참고하여 변경사항에 대한 요약과 필요한 설명을 한국어로 작성해줘:\n<git diff>${diffOutput}</git diff>`;
            const result = await model.generateContent(prompt);
            const response = await result.response;
            const text = await response.text();
            fs.writeFileSync('pr_summary.txt', text);
            console.log('PR summary saved!');

      # 생성된 요약 내용을 PR 댓글로 추가하기 위해 JSON 문자열로 포맷팅
      - name: Format and add PR review comments
        if: env.EVENT_TYPE == 'pull_request'
        id: store
        run: |
          COMMENT=$(jq -c 'if type == "array" then . else [.] end' review_result.txt)
          echo "comment=$COMMENT" >> $GITHUB_OUTPUT

      - name: Add Pull Request Summary Comment
        if: github.event_name == 'pull_request'
        uses: nbaztec/add-pr-review-comment@v1.0.7
        with:
          comments: ${{ steps.store.outputs.comment }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]'
          allow-repeats: false
