name: Gemini PR Summary and Explanation

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  pr-summary:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node
        uses: actions/setup-node@v3

      - name: Install Dependencies
        run: npm install @google/generative-ai

      # PR 이벤트의 변경사항(diff) 추출
      - name: Get git diff for PR
        run: |
          git fetch origin "${{ github.event.pull_request.base.ref }}"
          git fetch origin "${{ github.event.pull_request.head.ref }}"
          git diff --unified=0 "origin/${{ github.event.pull_request.base.ref }}" > diff.txt

      # Gemini API를 호출하여 PR 제목, 설명, diff를 포함한 프롬프트로 요약 및 설명 생성
      - name: Run Gemini-1.5-flash
        id: gemini_review
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require("fs");
            const diff_output = fs.readFileSync("diff.txt", 'utf8');
            
            const { GoogleGenerativeAI } = require("@google/generative-ai");
            const genAI = new GoogleGenerativeAI("${{ secrets.GEMINI_API_KEY }}");
            const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

            let prompt = `
              다음 Git diff를 분석하고 변경 사항에 대한 피드백을 작성하세요.
              하지만 깃허브에서 자동으로 숨겨지는 파일들은 제외해주세요.
              각 변경 사항에 대해 파일명, 수정 내용, 역할을 포함하여 아래와 같은 형식으로 요약해 주세요:
              
              형식: 
              - 파일명: {파일 경로}
              - 역할: {이 변경 사항의 역할 예: 기능 추가, 버그 수정 등}
              - 수정 내용: {수정된 내용의 간략한 설명}
              
              출력 형식은 아래와 같이 작성되어야 합니다.
              \[
                {
                  "file": "{파일 경로}",
                  "change": "{수정 내용}",
                  "role": "{역할}"
                }
              \]

              추가로 마지막 부분에는 이 PR을 최종 요약하여 출력형식을 유지하며 알려주세요.
              
              <git diff>${diff_output}</git diff>`;

            try {
              const result = await model.generateContent(prompt);
              const response = await result.response;
              const text = await response.text();

              if (!text || text.trim().length === 0) {
                console.log("❌ Gemini API 응답이 비어 있습니다.");
                throw new Error("Gemini API 응답이 비어 있습니다.");
              }

              fs.writeFileSync('review_result.txt', text);
              console.log("✅ Gemini API 응답을 review_result.txt 파일에 저장했습니다.");
            } catch (error) {
              console.error("❌ Gemini API 요청 중 오류 발생:", error);
              process.exit(1);
            }
            
      - name: Check if review_result.txt exists
        run: |
          if [ -f review_result.txt ]; then
            echo "review_result.txt 파일이 정상적으로 생성되었습니다."
            # 마크다운 문법 제거 후 파일 내용 확인
            cleaned_content=$(cat review_result.txt | sed 's/^```json//g' | sed 's/```//g')
            echo "$cleaned_content" > cleaned_review_result.txt  # 마크다운 문법이 제거된 파일로 저장
          else
            echo "❌ review_result.txt 파일이 존재하지 않습니다."
            exit 1  # 파일이 없으면 에러 발생
          fi
      
      - name: Format and add PR review comments
        id: store
        run: |
          COMMENT=$(cat cleaned_review_result.txt | jq -c 'if type == "array" then . else [.] end')
          
          # JSON 배열을 문자열로 변환
          COMMENT_STRING=$(echo "$COMMENT" | jq -r '.[] | "### < \(.file) >\n  - **역할:**\n \(.role)\n\n  - **수정 내용:**\n \(.change)\n\n"')
          
          # 줄바꿈을 환경 변수에 넣는 방법
          echo "comment<<EOF" >> $GITHUB_OUTPUT
          echo "# PR 요약" >> $GITHUB_OUTPUT
          echo -e "$COMMENT_STRING" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT


      - name: Add Pull Request Summary Comment
        uses: mshick/add-pr-comment@v2
        with:
          message: ${{ steps.store.outputs.comment }}  # 이 값을 PR 댓글로 추가
          repo-token: ${{ secrets.GITHUB_TOKEN }}
